# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

variables:
  rgQA: 'test7'
  rgLive: 'test8'
  



stages:
- stage: Stage1
  variables:
    stga: 1-1
    stgb: 1-2
  jobs:
  - job: Stage1Job1
    variables:
      joba: 1-1-1
      jobb: 1-1-2
    pool:
      vmImage: windows-latest
    steps:
    - task: AzureCLI@2
      name: TaskOutputTest
      inputs:
        azureSubscription: $(AzureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          echo test001
          echo $(joba)
          echo test002
          Write-Host "echo $(joba)"
          echo test003
          echo setting the variable...
          Write-Host "##vso[task.setvariable variable=job1var;isOutput=true]$(joba)"
          echo test009
      displayName: 'Stage1Job1Step1'
    - script: |
        Write-Host "Using the mapped env var for this task works and is recommended: $env:SQLUSERNAME"
      displayName: test-echo
      env:
        SQLUSERNAME: $(UinsureDBTestAutomationUsername)
        sqlpassword: $(UinsureDBTestAutomationPassword)
    - bash: echo "test output $SQLUSERNAME"
      displayName: bash-test
      env:
        SQLUSERNAME: $(UinsureDBTestAutomationUsername)
        sqlpassword: $(UinsureDBTestAutomationPassword)
    - powershell: |
        Write-Host "Using an input-macro works: $(UinsureDBTestAutomationUsername)"
        Write-Host "Using the env var directly does not work: $env:MYSECRET"
        Write-Host "Using a global secret var mapped in the pipeline does not work either: $env:GLOBAL_MYSECRET"
        Write-Host "Using a global non-secret var mapped in the pipeline works: $env:GLOBAL_MY_MAPPED_ENV_VAR" 
        Write-Host "Using the mapped env var for this task works and is recommended: $env:MY_MAPPED_ENV_VAR"
      env:
        MY_MAPPED_ENV_VAR: $(UinsureDBTestAutomationUsername) # the recommended way to map to an env variable

    - task: AzureCLI@2
      inputs:
        azureSubscription: $(AzureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          echo test010
          #Write-Host "has variable worked S job1var  $(job1var)"
          echo test011
          #echo what do this show $(job1var)
          echo test012
    - script: |
        echo simple cmd.exe script
      displayName: 'Stage1Job1Step2'


  - job: Stage1Job2
    dependsOn: ['Stage1Job1']
    variables:
      jobc: 1-2-1
      jobd: 1-2-2
      job1var: $[ dependencies.Stage1Job1.outputs['TaskOutputTest.job1var'] ]
    pool:
      vmImage: windows-latest
    steps:
    - script: |
        echo Hello, world!
        echo test job variable
        echo other job $(joba)
        echo other job test on same line inside single quote: $(jobb)
        echo 'test stage var'
        echo $(stga)
        echo 'test root var'
        echo $(rgQA)
        echo test this job variable
        echo this job $(joba)
        echo this job test on same line inside single quote: $(jobb)
        echo **********************
        echo ** var from job 1 ****
        echo was......: $(job1var)
      displayName: 'Stage1Job2Step1'

    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Some other script'

- stage: Stage2
  dependsOn: ['Stage1']
  variables:
    stga: 2-1
    stgb: 2-2
    job1var: $[ stageDependencies.Stage1.Stage1Job1.outputs['TaskOutputTest.job1var'] ]
  jobs:
  - job: Stage2Job1
    variables:
      joba: 2-1-1
      jobb: 2-1-2
    pool:
      vmImage: windows-latest
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(AzureServiceConnection)
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          echo test021
          echo ** var from stage job 1 ****
          echo was......: $(job1var)
      displayName: 'Stage2Job1Step1'